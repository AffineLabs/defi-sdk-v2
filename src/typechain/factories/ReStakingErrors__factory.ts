/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ReStakingErrors,
  ReStakingErrorsInterface,
} from "../ReStakingErrors";

const _abi = [
  {
    inputs: [],
    name: "AlreadyApprovedToken",
    type: "error",
  },
  {
    inputs: [],
    name: "CannotDepositForZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "DepositAmountCannotBeZero",
    type: "error",
  },
  {
    inputs: [],
    name: "DepositPaused",
    type: "error",
  },
  {
    inputs: [],
    name: "ExceedsDelegatorWithdrawableAssets",
    type: "error",
  },
  {
    inputs: [],
    name: "ExceedsDepositLimit",
    type: "error",
  },
  {
    inputs: [],
    name: "ExceedsMaxDelegatorLimit",
    type: "error",
  },
  {
    inputs: [],
    name: "ExceedsMintLimit",
    type: "error",
  },
  {
    inputs: [],
    name: "ExceedsRedeemLimit",
    type: "error",
  },
  {
    inputs: [],
    name: "ExceedsWithdrawLimit",
    type: "error",
  },
  {
    inputs: [],
    name: "ExistingEscrowDebt",
    type: "error",
  },
  {
    inputs: [],
    name: "InactiveDelegator",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientLiquidAssets",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidDelegatorFactory",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidEscrowVault",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidWithdrawalAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "NoResolvingEpoch",
    type: "error",
  },
  {
    inputs: [],
    name: "NonZeroEmptyDelegatorTVL",
    type: "error",
  },
  {
    inputs: [],
    name: "NotApprovedToken",
    type: "error",
  },
  {
    inputs: [],
    name: "ProfitUnlocking",
    type: "error",
  },
  {
    inputs: [],
    name: "RequireHarvest",
    type: "error",
  },
  {
    inputs: [],
    name: "RunningEpoch",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenNotAllowedForStaking",
    type: "error",
  },
  {
    inputs: [],
    name: "WithdrawAmountCannotBeZero",
    type: "error",
  },
] as const;

export class ReStakingErrors__factory {
  static readonly abi = _abi;
  static createInterface(): ReStakingErrorsInterface {
    return new utils.Interface(_abi) as ReStakingErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ReStakingErrors {
    return new Contract(address, _abi, signerOrProvider) as ReStakingErrors;
  }
}
